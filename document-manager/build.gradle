import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.filter.ReduceDuplicateLicensesFilter
import com.github.jk1.license.render.InventoryMarkdownReportRenderer

plugins {
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    alias libs.plugins.dokka
    alias libs.plugins.dependency.license.report
    id 'signing'
    alias libs.plugins.dependencycheck
    alias libs.plugins.sonarqube
    alias libs.plugins.maven.publish
}

apply from: 'jacoco.gradle'

android {
    namespace NAMESPACE
    group GROUP
    compileSdk 33

    defaultConfig {
        minSdk 26
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "eu.europa.ec.eudi.wallet.document.test"
        testHandleProfiling true
        testFunctionalTest true

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.toVersion(libs.versions.java.get())
        targetCompatibility JavaVersion.toVersion(libs.versions.java.get())
    }
    kotlinOptions {
        jvmTarget = libs.versions.java.get()
    }

    sourceSets {
        test {
            resources {
                srcDirs 'src\\test\\resources'
            }
        }
    }
}

dependencies {

    // Google library
    implementation (libs.identity.credential) {
        exclude group: "org.bouncycastle"
    }
    implementation (libs.android.identity.credential) {
        exclude group: "org.bouncycastle"
    }

    implementation libs.biometric.ktx

    // CBOR
    implementation libs.cbor
    implementation libs.cose

    implementation libs.bouncy.castle.prov
    implementation libs.bouncy.castle.pkix

    testImplementation libs.junit
    testImplementation libs.mockk
    testImplementation libs.json

    androidTestImplementation libs.android.junit
    androidTestImplementation libs.espresso.core
}

dependencyCheck {

    def nvdApiKey = System.getenv("NVD_API_KEY")
    formats = ['XML', 'HTML']

    if (nvdApiKey != null) {
        nvd {
            apiKey = "${nvdApiKey}"
        }
    }
}

tasks.register("clearDocsDir", Delete.class) {
    delete(file("$rootDir/docs"))
}

dokkaGfm.dependsOn("clearDocsDir")
dokkaGfm {
    outputDirectory.set(file("$rootDir/docs"))
}

licenseReport {
    unionParentPomLicenses = false
    filters = [new LicenseBundleNormalizer(), new ReduceDuplicateLicensesFilter(), new ExcludeTransitiveDependenciesFilter()]
    configurations = ['releaseRuntimeClasspath']
    excludeBoms = true
    excludeOwnGroup = true
    renderers = [new InventoryMarkdownReportRenderer("licenses.md", "${POM_DESCRIPTION}")]
}

tasks.register('copyLicenseReport', Copy) {
    from "$buildDir/reports/dependency-license/licenses.md"
    into "$rootDir"
    dependsOn 'generateLicenseReport'
}
generateLicenseReport.finalizedBy("copyLicenseReport")
build.finalizedBy("generateLicenseReport", "dokkaGfm")

tasks.register('dokkaHtmlJar', Jar.class) {
    dependsOn(dokkaHtml)
    from(dokkaHtml)
    archiveClassifier.set("html-docs")
}

tasks.register('dokkaJavadocJar', Jar.class) {
    dependsOn(dokkaJavadoc)
    from(dokkaJavadoc)
    archiveClassifier.set("javadoc")
}

mavenPublishing {
    pom {
        ciManagement {
            system = "github"
            url = "${POM_SCM_URL}/actions"
        }
    }
}