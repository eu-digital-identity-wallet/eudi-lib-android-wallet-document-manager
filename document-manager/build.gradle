import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.filter.ReduceDuplicateLicensesFilter
import com.github.jk1.license.render.InventoryMarkdownReportRenderer

plugins {
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    alias libs.plugins.dokka
    alias libs.plugins.dependency.license.report
    alias libs.plugins.spotless
    id 'maven-publish'
    id 'signing'
}

def meta = [
        namespace   : 'eu.europa.ec.eudi.wallet.document',
        groupId     : 'eu.europa.ec.eudi',
        artifactId  : 'eudi-lib-android-wallet-document-manager',
        version     : '1.0.0-SNAPSHOT',
        description : 'EUDI wallet library for managing documents',
        orgUrl      : 'https://github.com/eu-digital-identity-wallet',
        baseUrl     : 'https://github.com/eu-digital-identity-wallet/eudi-lib-android-wallet-document-manager',
        gitUrl      : 'scm:git@github.com:eu-digital-identity-wallet/eudi-lib-android-wallet-document-manager.git',
        sshUrl      : 'scm:git:ssh://github.com:eu-digital-identity-wallet/eudi-lib-android-wallet-document-manager.git',
        snapshotsUrl: 'https://s01.oss.sonatype.org/content/repositories/snapshots/',
        ReleasesUrl : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
]

android {
    namespace meta.namespace
    version meta.version
    group meta.groupId
    compileSdk 33

    defaultConfig {
        minSdk 26
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "eu.europa.ec.eudi.wallet.document.test"
        testHandleProfiling true
        testFunctionalTest true

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.toVersion(libs.versions.java.get())
        targetCompatibility JavaVersion.toVersion(libs.versions.java.get())
    }
    kotlinOptions {
        jvmTarget = libs.versions.java.get()
    }

    sourceSets {
        test {
            resources {
                srcDirs 'src\\test\\resources'
            }
        }
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {

    // Google library
    implementation libs.identity.credential
    implementation libs.android.identity.credential

    // CBOR
    implementation libs.cbor
    implementation libs.cose

    implementation libs.bouncy.castle.prov
    implementation libs.bouncy.castle.pkix

    testImplementation libs.junit
    testImplementation libs.mockk

    androidTestImplementation libs.android.junit
    androidTestImplementation libs.espresso.core
}

spotless {
    def ktlintVersion = libs.versions.ktlint.get()
    kotlin {
        ktlint(ktlintVersion)
        target '**/*.kt'
        licenseHeaderFile(rootProject.file('license-header.txt'))
    }
}

tasks.register("clearDocsDir", Delete.class) {
    delete(file("$rootDir/docs"))
}

dokkaGfm.dependsOn("clearDocsDir")
dokkaGfm {
    outputDirectory.set(file("$rootDir/docs"))
}

licenseReport {
    unionParentPomLicenses = false
    filters = [new LicenseBundleNormalizer(), new ReduceDuplicateLicensesFilter(), new ExcludeTransitiveDependenciesFilter()]
    configurations = ['releaseRuntimeClasspath']
    excludeBoms = true
    excludeOwnGroup = true
    renderers = [new InventoryMarkdownReportRenderer("licenses.md", "${meta.description}")]
}

tasks.register('copyLicenseReport', Copy) {
    from "$buildDir/reports/dependency-license/licenses.md"
    into "$rootDir"
    dependsOn 'generateLicenseReport'
}
generateLicenseReport.finalizedBy("copyLicenseReport")
build.finalizedBy("generateLicenseReport", "dokkaGfm")

tasks.register('dokkaHtmlJar', Jar.class) {
    dependsOn(dokkaHtml)
    from(dokkaHtml)
    archiveClassifier.set("html-docs")
}

tasks.register('dokkaJavadocJar', Jar.class) {
    dependsOn(dokkaJavadoc)
    from(dokkaJavadoc)
    archiveClassifier.set("javadoc")
}

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.release
            }
            version = meta.version
            groupId meta.groupId
            artifactId meta.artifactId

            pom {
                name = meta.artifactId
                description = meta.description
                url = meta.baseUrl
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = meta.gitUrl
                    developerConnection = meta.sshUrl
                    url = meta.baseUrl
                }
                issueManagement {
                    system = 'GitHub'
                    url = meta.baseUrl + '/issues'
                }
                ciManagement {
                    system = 'GitHub'
                    url = meta.baseUrl + '/actions'
                }
                developers {
                    organization {
                        url = meta.orgUrl
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'sonatype'
            url = meta.version.endsWith('SNAPSHOT') ? meta.snapshotsUrl : meta.releasesUrl
            credentials(PasswordCredentials)
        }
    }
}